translation_unit:	external_declaration*
			;
external_declaration:	function_definition
			| declaration
			;
function_definition:	declarator compound_statement
			| declaration_specifiers declarator compound_statement
			| declarator declaration_list compound_statement
			| declaration_specifiers declarator declaration_list compound_statement
			;
declaration:		declaration_specifiers ';'
			| declaration_specifiers init_declarator_list ';'
			;
declaration_list:	declaration
			| declaration_list declaration
			;
declaration_specifiers:	storage_class_specifier
			| storage_class_specifier declaration_specifiers
			| type_specifier
			| type_specifier declaration_specifiers
			| type_qualifier
			| type_qualifier declaration_specifiers
			;
storage_class_specifier: "auto"
			| "register"
			| "static"
			| "extern"
			| "typedef"
			;
type_specifier:		"void"
			| "char"
			| "short"
			| "int"
			| "long"
			| "float"
			| "double"
			| "signed"
			| "unsigned"
			| struct_or_union_specifier
			| enum_specifier
			| TYPEDEF_NAME
			;
type_qualifier:		"const"
			| "volatile"
			;
struct_or_union_specifier: struct_or_union '{' struct_declaration_list '}'
			| struct_or_union IDENTIFIER '{' struct_declaration_list '}'
			| struct_or_union IDENTIFIER
			;
struct_or_union:	"struct"
			| "union"
			;
struct_declaration_list: struct_declaration
			| struct_declaration_list struct_declaration
			;
init_declarator_list:	init_declarator
			| init_declarator ',' init_declarator
			;
init_declarator:	declarator
			| declarator '=' initializer
			;
struct_declaration:	specifier_qualifier_list struct_declarator_list ';'
			;
specifier_qualifier_list: type_specifier
			| type_specifier specifier_qualifier_list
			| type_qualifier
			| type_qualifier specifier_qualifier_list
			;
struct_declarator_list:	struct_declarator
			| struct_declarator_list ',' struct_declarator
			;
struct_declarator:	declarator
			| ':' constant_expression
			| declarator ':' constant_expression
			;
enum_specifier:		"enum" '{' enumerator_list '}'
			| "enum" IDENTIFIER '{' enumerator_list '}'
			| "enum" IDENTIFIER
			;
enumerator_list:	enumerator
			| enumerator_list ',' enumerator
			;
enumerator:		IDENTIFIER
			| IDENTIFIER '=' constant_expression
			;

declarator:		pointer direct_declarator
			| direct_declarator
			;
direct_declarator:	IDENTIFIER
			| '(' declarator ')'
			| direct_declarator '[' constant_expression ']'
			| direct_declarator '[' ']'
			| direct_declarator '(' parameter_type_list ')'
			| direct_declarator '(' identifier_list ')'
			| direct_declarator '(' ')'
			;
pointer:		'*'
			| '*' type_qualifier_list
			| '*' pointer
			| '*' type_qualifier_list pointer
			;
type_qualifier_list:	type_qualifier
			| type_qualifier_list type_qualifier
			;
parameter_type_list:	parameter_list
			| parameter_list ',' '...'
			;
parameter_list:		parameter_declaration
			| parameter_list ',' parameter_declaration
			;
parameter_declaration:	declaration_specifiers declarator
			| declaration_specifiers
			| declaration_specifiers abstract_declarator
			;
identifier_list:	IDENTIFIER
			| identifier_list ',' IDENTIFIER
			;

initializer:		assignment_expression
			| '{' initializer_list ',' '}'
			;
initializer_list:	initializer
			| initializer_list ',' initializer
			;

type_name:		specifier_qualifier_list
			| specifier_qualifier_list abstract_declarator
			;

abstract_declarator:	pointer
			| direct_abstract_declarator
			| pointer direct_abstract_declarator
			;
direct_abstract_declarator: '(' abstract_declarator ')'
			| '[' ']'
			| '[' constant_expression ']'
			| direct_abstract_declarator '[' ']'
			| direct_abstract_declarator '[' constant_expression ']'
			;
statement:		labeled_statement
			| expression_statement
			| compound_statement
			| selection_statement
			| iteration_statement
			| jump_statement
			;
labeled_statement:	IDENTIFIER ':' statement
			| "case" constant_expression ':' statement
			| "default" ':' statement
			;
expression_statement:	';'
			| expression ';'
			;
compound_statement:	'{' '}'
			| '{' declaration_list '}'
			| '{' statement_list '}'
			| '{' declaration_list statement_list '}'
			;
statement_list:		statement
			| statement_list statement
			;
selection_statement:	"if" '(' expression ')' statement
			| "if" '(' expression ')' statement ! "else" statement
			| "switch" '(' expression ')' statement
			;
iteration_statement:	"while" '(' expression ')' statement
			| "do" statement "while" '(' expression ')' ';'
			| "for" '(' ';' ';' ')' statement
			| "for" '(' ';' ';' expression ')' statement
			| "for" '(' ';' expression ';' ')' statement
			| "for" '(' ';' expression ';' expression ')' statement
			| "for" '(' expression ';' ';' ')' statement
			| "for" '(' expression ';' ';' expression ')' statement
			| "for" '(' expression ';' expression ';' ')' statement
			| "for" '(' expression ';' expression ';' expression ')' statement
			;
jump_statement:		"goto" IDENTIFIER ';'
			| "continue" ';'
			| "break" ';'
			| "return" ';'
			| "return" expression ';'
			;
expression:		assignment_expression
			| expression ',' assignment_expression
			;
assignment_expression:	conditional_expression
			| unary_expression assignment_operator assignment_expression
			;
assignment_operator:	'=' | '*=' | '/=' | '%=' | '+=' | '-=' 
			| '<<=' | '>>=' | '&=' | '^=' | '|=' ;
conditional_expression:	logical_or_expression
			| logical_or_expression '?' expression ':' conditional_expression
			;
constant_expression:	conditional_expression
			;
logical_or_expression:	logical_and_expression
			| logical_or_expression '||' logical_and_expression
			;
logical_and_expression:	inclusive_or_expression
			| logical_and_expression '&&' inclusive_or_expression
			;
inclusive_or_expression: exclusive_or_expression
			| inclusive_or_expression '|' exclusive_or_expression
			;
exclusive_or_expression: and_expression
			| exclusive_or_expression '^' and_expression
			;
and_expression:		equality_expression
			| and_expression '&' equality_expression
			;
equality_expression:	relational_expression
			| equality_expression '==' relational_expression
			| equality_expression '!=' relational_expression
			;
relational_expression:	shift_expression
			| relational_expression '<' shift_expression
			| relational_expression '>' shift_expression
			| relational_expression '<=' shift_expression
			| relational_expression '>=' shift_expression
			;
shift_expression:	additive_expression
			| shift_expression '<<' additive_expression
			| shift_expression '>>' additive_expression
			;
additive_expression:	multiplicative_expression
			| additive_expression '+' multiplicative_expression
			| additive_expression '-' multiplicative_expression
			;
multiplicative_expression: cast_expression
			| multiplicative_expression '*' cast_expression
			| multiplicative_expression '/' cast_expression
			| multiplicative_expression '%' cast_expression
			;
cast_expression:	unary_expression
			| '(' type_name ')' cast_expression
			;

unary_expression:	postfix_expression
			| '++' unary_expression
			| '--' unary_expression
			| unary_operator cast_expression
			| "sizeof" unary_expression
			| "sizeof" '(' type_name ')'
			;
unary_operator:		'&' | '*' | '+' | '-' | '~' | '!' ;
postfix_expression:	primary_expression
			| postfix_expression '[' expression ']'
			| postfix_expression '(' ')'
			| postfix_expression '(' argument_expression_list ')'
			| postfix_expression '.' IDENTIFIER
			| postfix_expression '->' IDENTIFIER
			| postfix_expression '++'
			| postfix_expression '--'
			;
argument_expression_list: assignment_expression
			| argument_expression_list ',' assignment_expression
			;
primary_expression:	IDENTIFIER
			| constant
			| STRING
			| '(' expression ')'
			;
constant:		INTEGER_CONSTANT
			| CHARACTER_CONSTANT
			| FLOATING_CONSTANT
			| ENUMERATION_CONSTANT
			;
